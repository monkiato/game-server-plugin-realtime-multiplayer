// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package multiplayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MatchResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsMatchResponse(buf []byte, offset flatbuffers.UOffsetT) *MatchResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MatchResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMatchResponse(buf []byte, offset flatbuffers.UOffsetT) *MatchResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MatchResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MatchResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MatchResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MatchResponse) ResponseId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MatchResponse) MutateResponseId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *MatchResponse) MatchInfo(obj *MatchInfo) *MatchInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MatchInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MatchResponse) Players(obj *PlayerInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MatchResponse) PlayersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MatchResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MatchResponseAddResponseId(builder *flatbuffers.Builder, responseId uint32) {
	builder.PrependUint32Slot(0, responseId, 0)
}
func MatchResponseAddMatchInfo(builder *flatbuffers.Builder, matchInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(matchInfo), 0)
}
func MatchResponseAddPlayers(builder *flatbuffers.Builder, players flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(players), 0)
}
func MatchResponseStartPlayersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MatchResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
