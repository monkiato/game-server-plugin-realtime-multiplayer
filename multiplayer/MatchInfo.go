// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package multiplayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MatchInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsMatchInfo(buf []byte, offset flatbuffers.UOffsetT) *MatchInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MatchInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMatchInfo(buf []byte, offset flatbuffers.UOffsetT) *MatchInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MatchInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MatchInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MatchInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MatchInfo) MatchId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MatchInfo) MutateMatchId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func MatchInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func MatchInfoAddMatchId(builder *flatbuffers.Builder, matchId uint32) {
	builder.PrependUint32Slot(0, matchId, 0)
}
func MatchInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
