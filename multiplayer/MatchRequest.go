// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package multiplayer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MatchRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMatchRequest(buf []byte, offset flatbuffers.UOffsetT) *MatchRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MatchRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMatchRequest(buf []byte, offset flatbuffers.UOffsetT) *MatchRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MatchRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MatchRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MatchRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MatchRequest) RequestPlayer(obj *RequestPlayerInfo) *RequestPlayerInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RequestPlayerInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MatchRequest) Match(obj *MatchInfo) *MatchInfo {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MatchInfo)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MatchRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MatchRequestAddRequestPlayer(builder *flatbuffers.Builder, requestPlayer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(requestPlayer), 0)
}
func MatchRequestAddMatch(builder *flatbuffers.Builder, match flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(match), 0)
}
func MatchRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
